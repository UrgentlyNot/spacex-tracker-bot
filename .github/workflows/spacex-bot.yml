name: SpaceX Bot Automation

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches:
      - main
  schedule:
    - cron: '0,30 * * * *'  # Every 30 minutes by default (to be updated dynamically)

permissions:
  actions: write  # Grant write access to actions for workflow dispatch (though we'll remove dispatch)
  contents: read  # Required for checkout and file operations

jobs:
  update-schedule:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Check launch window and update schedule
        id: check-launch-window
        run: |
          python -c "import datetime; import requests; from datetime import timezone; data = requests.get('https://api.spacexdata.com/v4/launches/upcoming').json(); now = datetime.datetime.now(timezone.utc); in_window = any(abs((datetime.datetime.fromisoformat(l['date_utc'].replace('Z', '+00:00')) - now).total_seconds()) <= 3600 for l in data); print(f'::set-output name=in_window::{in_window}')"
        shell: bash
      - name: Update workflow schedule
        if: steps.check-launch-window.outputs.in_window == 'True'
        run: |
          sed -i 's/0,30 * * * */*/1 * * * */g' .github/workflows/spacex-bot.yml
      - name: Revert schedule if no launch window
        if: steps.check-launch-window.outputs.in_window == 'False'
        run: |
          sed -i 's/*/1 * * * */0,30 * * * */g' .github/workflows/spacex-bot.yml

  run-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: update-schedule
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run SpaceX Bot
        run: python spacex_bot.py
        env:
          API_KEY: ${{ secrets.API_KEY }}
          API_SECRET: ${{ secrets.API_SECRET }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
          BEARER_TOKEN: ${{ secrets.BEARER_TOKEN }}
